import { ErrorCat } from './errorPolicy.js';import { escapeStadiumParens } from './escapeStadium.js';function minimalFix(code){let s=String(code||'').replace(/^\ufeff/,'').replace(/\r\n?/g,'\n');s=s.replace(/\(\[\s*([\s\S]*?)\s*\]\)/g,(m,inner)=>'(['+inner.replace(/\(/g,'&#40;').replace(/\)/g,'&#41;')+'])');return{code:s,notes:['minimal: stripBOM/normalize/stadiumParens']}}async function registryFix(code,log){const url='./autofix/assets/rules.registry.json';try{const res=await fetch(url);if(!res.ok)throw new Error('HTTP '+res.status);const rules=await res.json();let s=String(code||'');const notes=[];for(const r of rules){try{if(r.match&&r.match.regex&&!(new RegExp(r.match.regex,'m')).test(s))continue;if(r.detect&&r.detect.regex&&!(new RegExp(r.detect.regex,'m')).test(s))continue;if(r.fix&&r.fix.regex){const before=s;s=s.replace(new RegExp(r.fix.regex,'mg'),r.fix.replace||'');if(s!==before)notes.push(r.id||'rule')}}catch{}}return{code:s,notes:['registry:'+notes.join(', ')]}}catch(e){log({level:'warn',cat:ErrorCat.RULES_FETCH,msg:'registry fetch failed: '+e});return minimalFix(code)}}async function workerFix(code,log){try{const w=new Worker('./autofix/js/worker.mjs',{type:'module'});const payload={files:{mermaid:String(code||'')},uiOptions:{mermaidConfig:window.__mermaidConfig||{}}};const res=await new Promise((resolve,reject)=>{const t=setTimeout(()=>{try{w.terminate()}catch{};reject(new Error('timeout'))},1500);w.onmessage=ev=>{clearTimeout(t);try{w.terminate()}catch{};resolve(ev.data)};w.onerror=e=>{clearTimeout(t);try{w.terminate()}catch{};reject(e.message||e)};w.postMessage(payload)});const codePatched=res?.code||String(code||'');const notes=[];if(res?.ai?.rulesHit)notes.push('ai.rules:'+(res.ai.rulesHit.length||0));return{code:codePatched,notes}}catch(e){log({level:'warn',cat:ErrorCat.WORKER_TIMEOUT,msg:'worker fail: '+e});return minimalFix(code)}}export async function runAutoFix(code,provider,log){if(provider==='minimal')return minimalFix(code);if(provider==='worker')return workerFix(code,log);if(provider==='registry')return registryFix(code,log);try{return await workerFix(code,log)}catch{}try{return await registryFix(code,log)}catch{}return minimalFix(code)}
/* eslint-disable no-unused-vars */