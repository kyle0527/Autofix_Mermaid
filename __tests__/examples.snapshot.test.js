/// <reference types="jest" />
import { applyRules, rule_flow_direction, rule_legacy_to_flowchart, rule_id_normalize } from '../src/core/rules';
// 由於 NodeNext 模式，需要顯式副檔名；此處測試層可允許透過 ts-jest 處理，不再補 .js
const examples = [];
// 只加入前 4 個與最後 1 個，避免測試檔過大；其餘可後續再補充分檔維護
examples.push(`flowchart TD\n    n0([ Start: run_checks.py module ])\n    n1([ End / 結束 ])\n    n2["Import / 導入"]\n    n3["ImportFrom / 導入自"]\n    n4["sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))"]\n    n5["ImportFrom / 導入自"]\n    n6["def main... / 定義"]\n    n7{"if __name__ == '__main__' / 如果 __name__ == '__main__'"}\n    n8["main() / main()"]\n    n9["merge / 合併"]\n    n0 --> n2\n    n2 --> n3\n    n3 --> n4\n    n4 --> n5\n    n5 --> n6\n    n6 --> n7\n    n7 -->|True| n8\n    n7 -->|False| n9\n    n8 --> n9\n    n9 --> n1`);
examples.push(`flowchart TD\n    n0([" Start: main() / Start: main() "])\n    n1([" End / 結束 "])\n    n2["ap = argparse.ArgumentParser() / ap = argparse.ArgumentParser()"]\n    n3["ap.add_argument('--in', dest='infile', required=False, help='path to apis.json') / ap.add_argument('--in', dest='infile', required=False, help='path to apis.json')"]\n    n4["ap.add_argument('--checks', default='idor,oauth') / ap.add_argument('--checks', default='idor,oauth')"]\n    n5["ap.add_argument('--out', dest='outfile', default='out/findings.jsonl') / ap.add_argument('--out', dest='outfile', default='out/findings.jsonl')"]\n    n6["args = ap.parse_args() / args = ap.parse_args()"]\n    n7["checks = [c.strip() for c in args.checks.split(',') if c.strip()] / checks = [c.strip() for c in args.checks.split(',') if c.strip()]"]\n    n8["classes = [REGISTRY[c] for c in checks if c in REGISTRY] / classes = [REGISTRY[c] for c in checks if c in REGISTRY]"]\n    n9["apis = None / apis = None"]\n    n10{"if args.infile / 如果 args.infile"}\n    n11["try / 嘗試"]\n    n12["With / With"]\n    n13["except Exception / 例外"]\n    n14["apis = None / apis = None"]\n    n15["after try / try 後"]\n    n16["merge / 合併"]\n    n17["out_lines: List[str] = [] / out_lines: List[str] = []"]\n    n18{"for Cls in classes / for Cls in classes"}\n    n19["inst = Cls() / inst = Cls()"]\n    n20{"for finding in inst.run(apis=apis) / for finding in inst.run(apis=apis)"}\n    n21["out_lines.append(finding.to_json()) / out_lines.append(finding.to_json())"]\n    n22["after for / for 後"]\n    n23["after for / for 後"]\n    n24["Import / 導入"]\n    n25["os.makedirs(os.path.dirname(args.outfile), exist_ok=True) / os.makedirs(os.path.dirname(args.outfile), exist_ok=True)"]\n    n26["With / With"]\n    n27["print(f'wrote {len(out_lines)} findings to {args.outfile}') / print(f'wrote {len(out_lines)} findings to {args.outfile}')"]\n    n0 --> n2\n    n2 --> n3\n    n3 --> n4\n    n4 --> n5\n    n5 --> n6\n    n6 --> n7\n    n7 --> n8\n    n8 --> n9\n    n9 --> n10\n    n10 -->|True| n11\n    n10 -->|False| n16\n    n11 --> n12\n    n11 --> n13\n    n12 --> n15\n    n13 --> n14\n    n14 --> n15\n    n15 --> n16\n    n16 --> n17\n    n17 --> n18\n    n18 -->|True| n19\n    n18 -->|False| n23\n    n19 --> n20\n    n20 -->|True| n21\n    n20 -->|False| n22\n    n21 --> n20\n    n22 --> n18\n    n23 --> n24\n    n24 --> n25\n    n25 --> n26\n    n26 --> n27\n    n27 --> n1`);
examples.push(`flowchart TD\n    n0(["Start: scorecard.py (module) / Start: scorecard.py (module)"])\n    n1(["End / 結束"])\n    n2["Import / 導入"]\n    n3["WEIGHTS = {'discovery': 0.2, 'protocol': 0.25, 'verification': 0.15, 'ranking': 0.1, 'delivery': 0.1, 'ecosystem': 0.1, 'compliance': 0.05, 'performance': 0.05} / WEIGHTS = {'discovery': 0.2, 'protocol': 0.25, 'verification': 0.15, 'ranking': 0.1, 'delivery': 0.1, 'ecosystem': 0.1, 'compliance': 0.05, 'performance': 0.05}"]\n    n4["def score(...) / 定義"]\n    n5["def main(...) / 定義"]\n    n6{"if __name__ == '__main__' / 如果 __name__ == '__main__'"}\n    n7["main() / main()"]\n    n8["merge / 合併"]\n    n0 --> n2\n    n2 --> n3\n    n3 --> n4\n    n4 --> n5\n    n5 --> n6\n    n6 -->|True| n7\n    n6 -->|False| n8\n    n7 --> n8\n    n8 --> n1`);
examples.push(`flowchart TD\n    n0["Start: post_rank(ranked)"]\n    n1["End / 結束"]\n    n2["Tag findings created by :func:\`vector_probe\`."]\n    n3{"for item in ranked"}\n    n4{"if item.get('check') == 'demo/entrypoint'"}\n    n5["item.setdefault('tags', []).append('entrypoint-demo')"]\n    n6["merge"]\n    n7["after for"]\n    n8["return ranked"]\n    n0 --> n2\n    n2 --> n3\n    n3 -->|True| n4\n    n3 -->|False| n7\n    n4 -->|True| n5\n    n4 -->|False| n6\n    n5 --> n6\n    n6 --> n3\n    n7 --> n8\n    n8 --> n1`);
examples.push(`flowchart TD\n    n0(["Start: _extract_paths(text)"])\n    n1(["End / 結束"])\n    n2["paths: List[str] = []"]\n    n3{"for line in text.splitlines()"}\n    n4["stripped = line.strip()"]\n    n5{"if stripped.startswith('/') and stripped.endswith(':')"}\n    n6["paths.append(stripped[:-1])"]\n    n7["merge / 合併"]\n    n8["after for / for 後"]\n    n9["return paths / 返回 paths"]\n    n0 --> n2\n    n2 --> n3\n    n3 -->|True| n4\n    n3 -->|False| n8\n    n4 --> n5\n    n5 -->|True| n6\n    n5 -->|False| n7\n    n6 --> n7\n    n7 --> n3\n    n8 --> n9\n    n9 --> n1`);
describe('Provided example diagrams stability (subset)', () => {
    examples.forEach((ex, idx) => {
        test(`example subset #${idx + 1}`, () => {
            const input = { mmd: ex, diag: 'flowchart' };
            const { ctx, applied } = applyRules(input, [
                rule_legacy_to_flowchart,
                rule_flow_direction,
                rule_id_normalize
            ]);
            expect({ mmd: ctx.mmd, appliedCount: applied.length }).toMatchSnapshot();
        });
    });
});
